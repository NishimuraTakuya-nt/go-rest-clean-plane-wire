basePath: /api/v1
definitions:
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  middleware.ErrorResponse:
    description: Error response structure
    properties:
      details: {}
      message:
        type: string
      request_id:
        type: string
      status_code:
        type: integer
      type:
        type: string
    type: object
  response.ListUserResponse:
    description: User account list information
    properties:
      limit:
        type: integer
      offset:
        type: integer
      total_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/response.UserResponse'
        type: array
    type: object
  response.UserResponse:
    description: User account information
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
host: localhost:8081
info:
  contact: {}
  description: This is a sample server for a Go REST API using clean architecture.
  title: Go REST Clean API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: User login
      tags:
      - authentication
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get a user by ID
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        minimum: 0
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        maximum: 100
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List users
      tags:
      - user
swagger: "2.0"
